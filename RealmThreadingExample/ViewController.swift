//
//  ViewController.swift
//  RealmThreadingExample
//
//  Created by Í∞ïÎØºÌòú on 11/7/22.
//

import UIKit
import Realm
import RealmSwift

class ViewController: UIViewController {
    
    @IBOutlet weak var mainThreadAdd: UIButton!
    @IBOutlet weak var backgroundThreadAdd: UIButton!
    @IBOutlet weak var backgroundThreadAddWriteAsync: UIButton!
    @IBOutlet weak var passRealmInstance: UIButton!
    @IBOutlet weak var asyncAwaitPractice: UIButton!
    
    @IBOutlet weak var deleteAll: UIButton!
    @IBOutlet weak var printHoi: UIButton!
    
    let localRealm = try! Realm()
    var tasks: Results<Developer>!
    var peopleList: [Developer] = []
    
    // passRealmInstanceTapped ÌôïÏù∏ ÎπÑÍµêÏö© Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±ÏΩîÎìú
    let iOSDeveloper = Developer(name: "SeSaciOSProfessional", age: 50)

    override func viewDidLoad() {
        super.viewDidLoad()
        print(Realm.Configuration.defaultConfiguration.fileURL!)
        setButtonFuntion()
        
        // passRealmInstanceTapped ÌôïÏù∏ ÎπÑÍµêÏö© Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±ÏΩîÎìú
//        try! localRealm.write {
//            localRealm.add(iOSDeveloper)
//        }
    }
    
    func setButtonFuntion() {
        mainThreadAdd.addTarget(self, action: #selector(mainThreadAddTapped), for: .touchUpInside)
        backgroundThreadAdd.addTarget(self, action: #selector(backgroundThreadAddTapped), for: .touchUpInside)
        backgroundThreadAddWriteAsync.addTarget(self, action: #selector(backgroundThreadAddWriteAsyncTapped), for: .touchUpInside)
        passRealmInstance.addTarget(self, action: #selector(passRealmInstanceTapped), for: .touchUpInside)
        asyncAwaitPractice.addTarget(self, action: #selector(asyncAwaitPracticeTapped), for: .touchUpInside)
        deleteAll.addTarget(self, action: #selector(deleteAllTapped), for: .touchUpInside)
        printHoi.addTarget(self, action: #selector(printHoiTapped), for: .touchUpInside)
    }
    
    @objc func mainThreadAddTapped() {
        let startTime = CFAbsoluteTimeGetCurrent()
        
        // 5.088394999504089 Ï¥à
//        for i in 0..<1000 {
//            let people = Developer(name: "SeSAC\(i)", age: i)
//            try! localRealm.write({
//                localRealm.add(people)
//            })
//        }
        
        // 0.04514205455780029Ï¥à (Î∞∞Ïó¥Ïóê Îã¥ÏïÑÏÑú Ìïú Î≤àÏóê Ï∂îÍ∞ÄÌïòÎ©¥ ÏãúÍ∞ÑÎã®Ï∂ï Í∞ÄÎä•)
        for i in 0..<1000 {
            let developer = Developer(name: "SeSAC\(i)", age: i)
            peopleList.append(developer)
        }
        try! localRealm.write({
            localRealm.add(peopleList)
        })
        
        print("üê•Main Thread Time: \(CFAbsoluteTimeGetCurrent() - startTime)")
    }
    
    @objc func backgroundThreadAddTapped() {
        DispatchQueue.global().async {
            let startTime = CFAbsoluteTimeGetCurrent()
            let otherRealm = try! Realm() // **Ï§ëÏöî** realm Ïù∏Ïä§ÌÑ¥Ïä§Î•º Ï∂îÍ∞ÄÎ°ú ÏÉùÏÑ±Ìï¥ÏÑú Ï†ëÍ∑º
            autoreleasepool { // Ìï¥Îãπ Î∏îÎ°ùÎÇ¥ÏóêÏÑú write ÏûëÏóÖÏùÑ ÌïòÎ©¥ Ìï¥Îãπ ÏΩîÎìúÍ∞Ä Î©îÎ™®Î¶¨ Ìï¥Ï†ú ÎêòÎäî Í≤ÉÏùÑ Î™®Îì† ÏûëÏóÖÏùÑ ÎßàÏ≥§ÏùÑ ÎïåÎ°ú Î≥¥Ïû•Ìï®
                
                // 7.898086071014404Ï¥à
//                for i in 0..<1000 {
//                    let developer = Developer(name: "SeSAC\(i)", age: i)
//                    try! otherRealm.write({
//                        otherRealm.add(developer)
//                    })
//                }
                
                // 0.04514205455780029Ï¥à (Î∞∞Ïó¥Ïóê Îã¥ÏïÑÏÑú Ìïú Î≤àÏóê Ï∂îÍ∞ÄÌïòÎ©¥ ÏãúÍ∞ÑÎã®Ï∂ï Í∞ÄÎä•)
                for i in 0..<1000 {
                    let developer = Developer(name: "SeSAC\(i)", age: i)
                    self.peopleList.append(developer)
                }
                try! otherRealm.write({
                    otherRealm.add(self.peopleList)
                })
                
            }
            print("ü¶ÑBackground Thread Time: \(CFAbsoluteTimeGetCurrent() - startTime)")
        }
    }
    
    @objc func backgroundThreadAddWriteAsyncTapped() {
        let startTime = CFAbsoluteTimeGetCurrent()
        
        for i in 0..<1000 {
            let developer = Developer(name: "SeSAC\(i)", age: i)
            self.peopleList.append(developer)
        }
        
        // 0.16823697090148926 Ï¥à
        localRealm.writeAsync {
            self.localRealm.add(self.peopleList)
        }
        
        print("‚≠êÔ∏èBackground Thread // WriteAsync // Time: \(CFAbsoluteTimeGetCurrent() - startTime)")
    }
        
    @objc func passRealmInstanceTapped() {// 0.0065839290618896484Ï¥à ÏÜåÏöî
        let startTime = CFAbsoluteTimeGetCurrent()

        // iOSDeveloperÏùò thread-safeÌïú reference ÏÉùÏÑ±
        @ThreadSafe var iOSDeveloperRef = iOSDeveloper

        // background threadÎ°ú Ï∞∏Ï°∞ Ï†ÑÎã¨
        DispatchQueue(label: "background").async {
            autoreleasepool {
                let otherRealm = try! Realm()
                try! otherRealm.write {
                    guard let person = iOSDeveloperRef else { return }
                    person.age = 20
                }
            }
        }
        print("‚≠êÔ∏è@ThreadSafeÎ°ú threadÍ∞Ñ realm instance Ï†ÑÎã¨ Time: \(CFAbsoluteTimeGetCurrent() - startTime)")
    }
    
    // Í≥µÏãùÎ¨∏ÏÑú Î≥¥Í≥† ÏãúÌÇ§ÎäîÎç∞Î°ú async/await ÌñàÍ≥†, Îç∞Ïù¥ÌÑ∞ ÏàòÏ†ïÎêúÎã§.
    // Í∑ºÎç∞ ÏóêÎü¨ÎÇ®..memory read failed, thread bad access
    @objc func asyncAwaitPracticeTapped() async {
        await createAndUpdatePerson()
    }
    
    func someLongCallToGetNewName() async -> String {
        return "Lilac"
    }
    
    @MainActor func loadNameInBackground(@ThreadSafe person: Developer?) async {
        let newName = await someLongCallToGetNewName()
        let otherRealm = try! await Realm()
        try! otherRealm.write({
            person?.name = newName
        })
    }
    
    @MainActor func createAndUpdatePerson() async {
        let otherRealm = try! await Realm()
        
        let iOSDeveloper = Developer(name: "Rose", age: 30)
        try! otherRealm.write({
            otherRealm.add(iOSDeveloper)
        })
        await loadNameInBackground(person: iOSDeveloper)
    }
}

extension ViewController {
    
    @objc func deleteAllTapped() {
        try! localRealm.write({
            localRealm.deleteAll()
        })
    }
    
    @objc func printHoiTapped() {
        print("Hey!üï∫")
    }
}

